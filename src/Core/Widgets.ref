*$FROM LibraryEx
$EXTERN Map;

*$FROM Models/WidgetModel
$EXTERN Widget-WidgetType, Widget-Table, Widget-DataColumn, Widget-Data;

*$FROM Core/DataSources
$EXTERN DataSource-FetchQuery;

*$FROM Utils
$EXTERN TryMap;


$ENTRY Widget-Extended {
  s.DataSourceConn t.Widget
    , <FetchWidgetData s.DataSourceConn t.Widget>
    : {
      Success t.Data = Success <Widget-Data t.Widget t.Data>;

      Fails e.Error = Fails e.Error;
    }
}


FetchWidgetData {
  s.DataSourceConn t.Widget
    , <Widget-WidgetType t.Widget>
    : {
      (String 'PieChart') = <FetchPieChartData s.DataSourceConn t.Widget>;
      (String 'Histogram') = <FetchHistogramData s.DataSourceConn t.Widget>;
      (String e.Unsupported) = Fails 'Unsupported widget type: ' e.Unsupported;
    }
}


FetchPieChartData {
  s.DataSourceConn t.Widget
    , <Widget-Table t.Widget> : (String e.Table)
    , <Widget-DataColumn t.Widget> : (String e.DataColumn)
    , <DataSource-FetchQuery s.DataSourceConn
      'SELECT '
        e.DataColumn ', '
        'COUNT(' e.DataColumn ') '
      'FROM ' e.Table ' '
      'GROUP BY ' e.DataColumn
    >
    : {
      Success e.Tuples = Success (Array <Map widgets_PieChartDatumFromTuple e.Tuples>);
      Fails e.Error = Fails e.Error;
    }
}


$ENTRY widgets_PieChartDatumFromTuple {
  ((e.Title) (e.Count))
    = (Object
      ((String 'title') (String e.Title))
      ((String 'count') (Number (<Numb e.Count>) () ()))
    )
}


FetchHistogramData {
  s.DataSourceConn t.Widget
    , <Widget-Table t.Widget> : (String e.Table)
    , <Widget-DataColumn t.Widget> : (String e.DataColumn)
    , <DataSource-FetchQuery s.DataSourceConn 'SELECT ' e.DataColumn ' FROM ' e.Table>
    : {
      Success e.Tuples
        , <TryMap widgets_HistogramDatumFromTuple e.Tuples>
        : {
          Success e.Values = Success (Array e.Values);
          Fails e.Error = Fails 'Histogram can only use numerical data';
        };

      Fails e.Error = Fails e.Error;
    }
}


$ENTRY widgets_HistogramDatumFromTuple {
  ((e.Integer '.' e.Fraction))
    , <IsNumber e.Integer> : True
    , <IsDigits e.Fraction> : True
    = Success (Number (<Numb e.Integer>) (<Numb e.Fraction>) ());

  ((e.Integer))
    , <IsNumber e.Integer> : True
    = Success (Number (<Numb e.Integer>) () ());

  ((e.Nan)) = Fails 'Not a number';
}


IsNumber {
  '-' e.Number = <IsDigits e.Number>;
  e.Number = <IsDigits e.Number>;
}


IsDigits {
  s.Digit, '0123456789' : e.B s.Digit e.E = True;

  s.Digit e.Digits
    , '0123456789' : e.B s.Digit e.E
    = <IsDigits e.Digits>;

  e.Nan = False;
}
