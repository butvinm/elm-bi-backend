# generated by fastapi-codegen:
#   filename:  swagger.yaml
#   timestamp: 2025-01-06T23:47:02+00:00

from __future__ import annotations

from typing import List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class BaseWidget(BaseModel):
    widget_type: str = Field(..., description='Specifies the type of the widget.')
    title: str = Field(..., description='User-defined title of the widget.')


class Section(BaseModel):
    title: str = Field(..., description='Label for a pie chart category.')
    percentage: float = Field(
        ..., description='Percentage of the category relative to the total data.'
    )


class PieChart(BaseWidget):
    table: str = Field(
        ..., description='Name of the table in the data source used for the pie chart.'
    )
    x_column: str = Field(
        ..., description='Name of the column used as the category for the pie chart.'
    )
    sections: Optional[List[Section]] = Field(
        None, description='Computed sections of the pie chart based on the data.'
    )
    widget_type: Literal['PieChart']


class Range(BaseModel):
    left: Optional[float] = Field(
        None, description='Lower boundary of the bin. If null, right boundary is -inf.'
    )
    right: Optional[float] = Field(
        None, description='Upper boundary of the bin. If null, right boundary is +inf.'
    )


class Bin(BaseModel):
    range: Optional[Range] = Field(None, description='Range of values for this bin.')
    value: Optional[float] = Field(None, description='Count of items in this bin.')


class Histogram(BaseWidget):
    table: str = Field(
        ..., description='Name of the table in the data source used for the histogram.'
    )
    x_column: str = Field(
        ..., description='Name of the column used as the X-axis for the histogram.'
    )
    bins: Optional[List[Bin]] = Field(
        None, description='Distribution bins for the histogram.'
    )
    widget_type: Literal['Histogram']


class Widget(RootModel[Union[PieChart, Histogram]]):
    root: Union[PieChart, Histogram] = Field(..., discriminator='widget_type')


class DataSource(BaseModel):
    host: str = Field(
        ..., description='Hostname or IP address of the data source server.'
    )
    port: int = Field(
        ..., description='Port number for connecting to the data source server.'
    )
    username: str = Field(..., description='Username for data source authentication.')
    password: Optional[str] = Field(
        None, description='Password for data source authentication.'
    )
    database: str = Field(..., description='Name of the database to connect to.')


class Column(BaseModel):
    name: str = Field(..., description='Name of the column.')
    dataType: str = Field(..., description='Data type of the column.')


class DataSourceTable(BaseModel):
    name: str = Field(
        ...,
        description='Full table name, including schema, e.g., "HumanResources.Employee".',
    )
    columns: List[Column] = Field(
        ...,
        description='List of columns in the table, including their names and data types.',
    )


class Error(BaseModel):
    detail: Optional[str] = None


class GetDashboardPostRequest(BaseModel):
    dashboard_id: int


class DeleteDashboardPostRequest(BaseModel):
    dashboard_id: int


class GetDataSourceTablesPostRequest(BaseModel):
    dashboard_id: int


class GetDataSourceTablesPostResponse(RootModel[List[DataSourceTable]]):
    root: List[DataSourceTable]


class AddWidgetPostRequest(BaseModel):
    dashboard_id: int
    widget: Widget


class DeleteWidgetPostRequest(BaseModel):
    dashboard_id: int
    widget_id: int = Field(
        ..., description='Widget index withing the list of the dashboard widgets'
    )


class Dashboard(BaseModel):
    dashboard_id: int = Field(..., description='Unique identifier for the dashboard.')
    title: str = Field(..., description='User-defined title of the dashboard.')
    widgets: List[Widget] = Field(
        ..., description='List of widgets included in the dashboard.'
    )
    dataSource: DataSource = Field(
        ...,
        description='Configuration of the data source associated with the dashboard.',
    )


class GetDashboardsPostResponse(RootModel[List[Dashboard]]):
    root: List[Dashboard]


class DeleteDashboardPostResponse(RootModel[List[Dashboard]]):
    root: List[Dashboard]
