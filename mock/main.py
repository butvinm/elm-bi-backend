# generated by fastapi-codegen:
#   filename:  swagger.yaml
#   timestamp: 2025-01-08T03:09:21+00:00

from __future__ import annotations

from random import random
from typing import Optional, Union

from fastapi import FastAPI, HTTPException, Response
from fastapi.middleware.cors import CORSMiddleware

from .models import (
    AddWidgetPostRequest,
    Column,
    Dashboard,
    DataSource,
    DataSourceTable,
    Datum,
    DeleteDashboardPostRequest,
    DeleteDashboardPostResponse,
    DeleteWidgetPostRequest,
    Error,
    FetchWidgetDataPostRequest,
    GetDashboardPostRequest,
    GetDashboardsPostResponse,
    GetDataSourceTablesPostRequest,
    GetDataSourceTablesPostResponse,
    Histogram,
    HistogramData,
    PieChart,
    PieChartData,
    Widget,
    WidgetData,
)

app = FastAPI(
    title="Elm-BI API",
    version="1.0.1",
    description="API for a simplified business intelligence (BI) system.",
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


dashboards = {
    0: Dashboard(
        dashboard_id=0,
        title="Sample Dashboard",
        widgets=[
            Widget(
                PieChart(
                    widget_type="PieChart",
                    title="Some Pie Chart",
                    table="HumanResources.Employees",
                    data_column="Gender",
                ),
            ),
            Widget(
                Histogram(
                    widget_type="Histogram",
                    title="Some Histogram",
                    table="HumanResources.Employees",
                    data_column="Age",
                ),
            ),
        ],
        dataSource=DataSource(
            host="localhost",
            port=5432,
            username="postgres",
            password="postgres",
            database="postgres",
        ),
    )
}


@app.post("/get-dashboards", response_model=GetDashboardsPostResponse)
def post_get_dashboards() -> GetDashboardsPostResponse:
    """\
    Retrieve a list of all created dashboards.
    """
    return GetDashboardsPostResponse(list(dashboards.values()))


@app.post("/get-dashboard", response_model=Dashboard)
def post_get_dashboard(body: GetDashboardPostRequest) -> Dashboard:
    """
    Retrieve details of a specific dashboard by its ID, with optional data recalculation for widgets.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    return dashboards[body.dashboard_id]


@app.post(
    "/create-dashboard",
    response_model=None,
    responses={"201": {"model": Dashboard}, "400": {"model": Error}},
)
def post_create_dashboard(body: Dashboard, response: Response) -> Optional[Union[Dashboard, Error]]:
    """
    Create a new dashboard. Client may specify any dashboard_id, it will be generated automatically and can be retrieved from response.
    """
    if body.title == "test data source error":
        raise HTTPException(status_code=400, detail="Bad data source credentials.")

    dashboard_id = max(dashboards.keys(), default=0) + 1
    body.dashboard_id = dashboard_id
    dashboards[body.dashboard_id] = body

    response.status_code = 201
    return body


@app.post("/update-dashboard", response_model=Dashboard, responses={"400": {"model": Error}, "404": {"model": Error}})
def post_update_dashboard(body: Dashboard) -> Union[Dashboard, Error]:
    """
    Update the dashboard.
    """
    if body.title == "test data source error":
        raise HTTPException(status_code=400, detail="Bad data source credentials.")

    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    dashboards[body.dashboard_id] = body
    return body


@app.post(
    "/delete-dashboard",
    response_model=DeleteDashboardPostResponse,
    responses={"404": {"model": Error}},
)
def post_delete_dashboard(
    body: DeleteDashboardPostRequest,
) -> Union[DeleteDashboardPostResponse, Error]:
    """
    Delete the dashboard.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    dashboards.pop(body.dashboard_id)
    return DeleteDashboardPostResponse(list(dashboards.values()))


@app.post("/add-widget", response_model=Dashboard, responses={"404": {"model": Error}})
def post_add_widget(body: AddWidgetPostRequest) -> Union[Dashboard, Error]:
    """
    Add a new widget to a dashboard.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    dashboards[body.dashboard_id].widgets.append(body.widget)
    return dashboards[body.dashboard_id]


@app.post("/delete-widget", response_model=Dashboard, responses={"404": {"model": Error}})
def post_delete_widget(body: DeleteWidgetPostRequest) -> Union[Dashboard, Error]:
    """
    Remove a widget from a dashboard.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    if body.widget_id < 0 or body.widget_id >= len(dashboards[body.dashboard_id].widgets):
        raise HTTPException(status_code=404, detail="Widget not found.")

    dashboards[body.dashboard_id].widgets.pop(body.widget_id)
    return dashboards[body.dashboard_id]


@app.post(
    "/fetch-widget-data",
    response_model=WidgetData,
    responses={"400": {"model": Error}, "404": {"model": Error}},
)
def post_fetch_widget_data(
    body: FetchWidgetDataPostRequest,
) -> Union[WidgetData, Error]:
    """
    Retrieve data required to render a widget.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    if body.widget_id < 0 or body.widget_id >= len(dashboards[body.dashboard_id].widgets):
        raise HTTPException(status_code=404, detail="Widget not found.")

    widget = dashboards[body.dashboard_id].widgets[body.widget_id]
    if widget.root.widget_type == "PieChart":
        return WidgetData(
            PieChartData(data=[Datum(title="Women", count=1337), Datum(title="Man", count=999), Datum(title="Other", count=666)]),
        )
    else:
        return WidgetData(
            HistogramData(data=[random() * 100 - 50 for _ in range(1000)]),
        )


@app.post(
    "/get-data-source-tables",
    response_model=GetDataSourceTablesPostResponse,
    responses={"400": {"model": Error}, "404": {"model": Error}},
)
def post_get_data_source_tables(
    body: GetDataSourceTablesPostRequest,
) -> Union[GetDataSourceTablesPostResponse, Error]:
    """
    Retrieve the list of tables and their columns from the data source linked to a dashboard.
    """
    if body.dashboard_id not in dashboards:
        raise HTTPException(status_code=404, detail="Dashboard not found.")

    return GetDataSourceTablesPostResponse(
        [
            DataSourceTable(
                name="HumanResources.Employees",
                columns=[
                    Column(name="Age", dataType="int"),
                    Column(name="Gender", dataType="string"),
                ],
            ),
            DataSourceTable(
                name="HumanResources.Candidates",
                columns=[
                    Column(name="Age", dataType="int"),
                    Column(name="Department", dataType="string"),
                ],
            ),
        ]
    )
